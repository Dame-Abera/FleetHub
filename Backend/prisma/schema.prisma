// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  COMPANY_USER
  ADMIN
}

enum CompanyStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum CarStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SOLD
  RENTED
  MAINTENANCE
}

enum CarCategory {
  SUV
  Sedan
  Hatchback
  Coupe
  Convertible
  Wagon
  Pickup
  Van
  Truck
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum TransactionType {
  RENTAL
  SALE
}

enum PaymentMethod {
  CARD
  PAYPAL
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole @default(CUSTOMER)
  phone        String?
  avatar       String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  website      String?
  bio          String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Company User specific fields
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id])
  
  // Admin approval tracking
  approvedBy   String?
  approvedAt   DateTime?
  approvedByUser User? @relation("AdminApprovals", fields: [approvedBy], references: [id])

  // Relationships
  cars         Car[]
  bookings     Booking[]
  purchases    SaleTransaction[] @relation("Buyer")
  sales        SaleTransaction[] @relation("Seller")
  approvedUsers User[] @relation("AdminApprovals")
  reviews      Review[] @relation("Reviewer")
  receivedReviews Review[] @relation("Reviewee")
  approvedCars Car[] @relation("CarApprovals")
  approvedCompanies Company[] @relation("CompanyApprovals")

  @@map("users")
}

model Company {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  phone       String?
  address     String?
  website     String?
  description String?
  logo        String?
  status      CompanyStatus @default(PENDING)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Admin approval tracking
  approvedBy  String?
  approvedAt  DateTime?
  approvedByUser User? @relation("CompanyApprovals", fields: [approvedBy], references: [id])

  // Relationships
  users       User[]
  cars        Car[]

  @@map("companies")
}

model Car {
  id                  String       @id @default(uuid())
  name                String
  brand               String
  category            CarCategory
  features            Json?
  availableForRental  Boolean      @default(false)
  rentalPricePerDay   Decimal?     @db.Decimal(10, 2)
  availableForSale    Boolean      @default(false)
  salePrice           Decimal?     @db.Decimal(10, 2)
  images              String[]
  year                Int?
  color               String?
  description         String?
  mileage             Int?
  fuelType            String?
  transmission        String?
  seats               Int?
  location            String?
  status              CarStatus    @default(DRAFT)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Admin approval tracking
  approvedBy          String?
  approvedAt          DateTime?
  approvedByUser      User? @relation("CarApprovals", fields: [approvedBy], references: [id])
  rejectionReason     String?

  // Relationships
  postedById          String
  postedBy            User         @relation(fields: [postedById], references: [id])
  companyId           String?
  company             Company?     @relation(fields: [companyId], references: [id])
  bookings            Booking[]
  sales               SaleTransaction[]
  reviews             Review[]

  @@map("cars")
}

model Booking {
  id          String        @id @default(uuid())
  carId       String
  userId      String
  startDate   DateTime      @db.Date
  endDate     DateTime      @db.Date
  totalPrice  Decimal       @db.Decimal(10, 2)
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  car         Car           @relation(fields: [carId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

enum SaleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model SaleTransaction {
  id        String     @id @default(uuid())
  carId     String
  buyerId   String
  sellerId  String
  price     Decimal    @db.Decimal(10, 2)
  status    SaleStatus @default(PENDING)
  date      DateTime?
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  car       Car      @relation(fields: [carId], references: [id])
  buyer     User     @relation("Buyer", fields: [buyerId], references: [id])
  seller    User     @relation("Seller", fields: [sellerId], references: [id])

  @@map("sale_transactions")
}

model Payment {
  id              String        @id @default(uuid())
  transactionType TransactionType
  transactionId   String
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Payment processing details
  paymentIntentId String?       // Stripe/PayPal payment intent ID
  refundId        String?       // Refund transaction ID
  processedAt     DateTime?
  failedReason    String?

  @@map("payments")
}

model Review {
  id          String   @id @default(uuid())
  carId       String
  reviewerId  String
  revieweeId  String
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  car         Car      @relation(fields: [carId], references: [id])
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee    User     @relation("Reviewee", fields: [revieweeId], references: [id])

  @@unique([carId, reviewerId]) // One review per user per car
  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // 'APPROVAL', 'BOOKING', 'PAYMENT', 'REVIEW', etc.
  isRead    Boolean  @default(false)
  data      Json?    // Additional data for the notification
  createdAt DateTime @default(now())

  @@map("notifications")
} 